apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'com.github.adrninistrator'
version = "0.1.0"
def projectName = "uml-sequence-diagram-drawio"
description = "${projectName}"
sourceCompatibility = 1.8
targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'

[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

project.buildDir = 'build'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }

        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }

        resources {
            srcDir 'src/test/resources'
        }
    }
}

dependencies {
}

compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

processResources {
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

task createProject {
    doFirst {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

// 生成可以直接执行的jar包，并拷贝相关文件
task gen_run_jar(type: Jar) {
    archiveName 'run_usddi.jar'
    from(sourceSets.main.output) {
        into '/'
    }
	
    doLast{
        copy {
            from 'build/libs/run_usddi.jar'
            into 'output_dir/jar/'
        }
        copy {
            from 'src/main/resources/~usddi_conf/'
            into 'output_dir/~usddi_conf/'
        }
        copy {
            from 'run.bat'
            into 'output_dir/'
        }
        copy {
            from 'run.sh'
            into 'output_dir/'
        }
    }
}

task sourcesJar(type: Jar) {
    doFirst {
        archiveClassifier.set('sources')
        from sourceSets.main.allJava
    }
}

task javadocJar(type: Jar) {
    doFirst {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version "${version}"
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "uml-sequence-diagram-drawio"
                description = "Generate draw.io UML Sequence Diagram from text file."
                url = "https://github.com/Adrninistrator/uml-sequence-diagram-drawio"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "Adrninistrator"
                        name = "zhengyiee"
                        email = "zhengyiee@qq.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/Adrninistrator/uml-sequence-diagram-drawio.git"
                    developerConnection = "scm:git:https://github.com/Adrninistrator/uml-sequence-diagram-drawio.git"
                    url = "https://github.com/Adrninistrator/uml-sequence-diagram-drawio"
                }
            }
        }
    }
    repositories {
        maven {
            name 'sonatypeRepository'
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = "${NEXUS_USERNAME}"
                password = "${NEXUS_PASSWORD}"
            }
        }
        maven {
            name = 'sonatypeSnapshotRepository'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username = "${NEXUS_USERNAME}"
                password = "${NEXUS_PASSWORD}"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}